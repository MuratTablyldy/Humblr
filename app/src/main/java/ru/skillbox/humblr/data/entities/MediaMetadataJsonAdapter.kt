// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package ru.skillbox.humblr.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MediaMetadataJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<MediaMetadata>() {

  private val listOfMediaMetAdapter: JsonAdapter<MediaMet> =
    moshi.adapter(
      MediaMet::class.java, emptySet(),
      "mediaMetadata"
    )

  public override fun toString(): String = buildString(35) {
    append("GeneratedJsonAdapter(").append("MediaMetadata").append(')')
  }

  public override fun fromJson(reader: JsonReader): MediaMetadata {
    var map: HashMap<String, MediaMet> = HashMap()
    reader.beginObject()
    while (reader.hasNext()) {
      val name = reader.nextName()
      val json = reader.readJsonValue()
      val obj = listOfMediaMetAdapter.fromJsonValue(json)
      if (obj != null)
        map[name] = obj
    }
    reader.endObject()
    return MediaMetadata(
      list = map
    )
  }

  public override fun toJson(writer: JsonWriter, value_: MediaMetadata?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    for (pair in value_.list) {
      writer.name(pair.key)
      listOfMediaMetAdapter.toJson(writer, pair.value)
    }
    writer.endObject()
  }
}
