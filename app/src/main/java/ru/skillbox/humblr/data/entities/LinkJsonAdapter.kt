// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress(
    "DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION"
)

package ru.skillbox.humblr.data.entities

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class LinkJsonAdapter(
    moshi: Moshi
) : JsonAdapter<Link>() {
    private val options: JsonReader.Options = JsonReader.Options.of(
        "created",
        "created_utc",
        "ups",
        "downs",
        "likes",
        "author",
        "clicked",
        "domain",
        "hidden",
        "is_self",
        "locked",
        "media_embed",
        "secure_media",
        "num_comments",
        "preview",
        "over_18",
        "permalink",
        "saved",
        "score",
        "selftext",
        "subreddit",
        "subreddit_id",
        "thumbnail",
        "title",
        "url",
        "edited",
        "distinguished",
        "stickied",
        "media_metadata",
        "name"
    )

    private val longAdapter: JsonAdapter<Long> = moshi.adapter(
        Long::class.java, emptySet(),
        "created"
    )

    private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "ups")

    private val mediaMetadataAdapter: JsonAdapter<MediaMetadata> =
        moshi.adapter(MediaMetadata::class.java, emptySet(), "media_metadata")
    private val mediaAdapter: JsonAdapter<MediaYouTube> = moshi.adapter(
        MediaYouTube::class.java,
        emptySet(), "media_embed"
    )

    private val nullableBooleanAdapter: JsonAdapter<Boolean?> =
        moshi.adapter(Boolean::class.javaObjectType, emptySet(), "likes")

    private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(
        String::class.java,
        emptySet(), "author"
    )

    private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(
        Boolean::class.java, emptySet(),
        "clicked"
    )

    private val stringAdapter: JsonAdapter<String> = moshi.adapter(
        String::class.java, emptySet(),
        "domain"
    )
    private val nameAdapter: JsonAdapter<String> = moshi.adapter(
        String::class.java, emptySet(),
        "name"
    )

    private val nullableMediaAdapter: JsonAdapter<Media?> = moshi.adapter(
        Media::class.java,
        emptySet(), "media"
    )

    private val nullableImageUrlAdapter: JsonAdapter<ImageUrl?> = moshi.adapter(
        ImageUrl::class.java,
        emptySet(), "preview"
    )

    private val nullableAnyAdapter: JsonAdapter<Any?> = moshi.adapter(
        Any::class.java, emptySet(),
        "edited"
    )

    public override fun toString(): String = buildString(26) {
        append("GeneratedJsonAdapter(").append("Link").append(')')
    }

    public override fun fromJson(reader: JsonReader): Link {
        var created: Long? = null
        var createdUTC: Long? = null
        var ups: Int? = null
        var downs: Int? = null
        var likes: Boolean? = null
        var author: String? = null
        var clicked: Boolean? = null
        var domain: String? = null
        var hidden: Boolean? = null
        var isSelf: Boolean? = null
        var locked: Boolean? = null
        var media: MediaYouTube? = null
        var secureMedia: Media? = null
        var numComments: String? = null
        var preview: ImageUrl? = null
        var over18: Boolean? = null
        var permalink: String? = null
        var saved: Boolean? = null
        var score: Int? = null
        var selftext: String? = null
        var subreddit: String? = null
        var subredditId: String? = null
        var thumbnail: String? = null
        var title: String? = null
        var url: String? = null
        var edited: Any? = null
        var distinguished: String? = null
        var mediaMetadata: MediaMetadata? = null
        var stickied: Boolean? = null
        var name: String? = null
        reader.beginObject()
        while (reader.hasNext()) {
            when (reader.selectName(options)) {
                0 -> created = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "created",
                    "created", reader
                )
                1 -> createdUTC = longAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "createdUTC",
                    "created_utc", reader
                )
                2 -> ups =
                    intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("ups", "ups", reader)
                3 -> downs = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "downs", "downs",
                    reader
                )
                4 -> likes = nullableBooleanAdapter.fromJson(reader)
                5 -> author = nullableStringAdapter.fromJson(reader)
                6 -> clicked = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "clicked",
                    "clicked", reader
                )
                7 -> domain = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "domain",
                    "domain", reader
                )
                8 -> hidden = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "hidden",
                    "hidden", reader
                )
                9 -> isSelf = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "isSelf",
                    "is_self", reader
                )
                10 -> locked = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "locked",
                    "locked", reader
                )
                11 -> media = mediaAdapter.fromJson(reader)
                12 -> secureMedia = nullableMediaAdapter.fromJson(reader)
                13 -> numComments = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "numComments",
                    "num_comments",
                    reader
                )
                14 -> preview = nullableImageUrlAdapter.fromJson(reader)
                15 -> over18 = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "over18",
                    "over_18", reader
                )
                16 -> {
                    val perma = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                        "permalink",
                        "permalink", reader
                    )
                    permalink = perma.substring(1)
                }
                17 -> saved = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "saved", "saved",
                    reader
                )
                18 -> score = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "score", "score",
                    reader
                )
                19 -> selftext = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "selftext",
                    "selftext", reader
                )
                20 -> subreddit = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "subreddit",
                    "subreddit", reader
                )
                21 -> subredditId = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "subredditId",
                    "subreddit_id",
                    reader
                )
                22 -> thumbnail = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "thumbnail",
                    "thumbnail", reader
                )
                23 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "title", "title",
                    reader
                )
                24 -> url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "url", "url",
                    reader
                )
                25 -> edited = nullableAnyAdapter.fromJson(reader)
                26 -> distinguished = nullableStringAdapter.fromJson(reader)
                27 -> stickied = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull(
                    "stickied",
                    "stickied", reader
                )
                28 -> mediaMetadata = mediaMetadataAdapter.fromJson(reader)
                29 -> name = nameAdapter.fromJson(reader)
                -1 -> {
                    // Unknown name, skip it.
                    reader.skipName()
                    reader.skipValue()
                }
            }
        }
        reader.endObject()
        return when {
            secureMedia?.reddit_video != null -> {
                Link.LinkRedditVideo(
                    created = created ?: throw Util.missingProperty("created", "created", reader),
                    createdUTC = createdUTC ?: throw Util.missingProperty(
                        "createdUTC",
                        "created_utc",
                        reader
                    ),
                    ups = ups ?: throw Util.missingProperty("ups", "ups", reader),
                    downs = downs ?: throw Util.missingProperty("downs", "downs", reader),
                    likes = likes,
                    author = author,
                    clicked = clicked ?: throw Util.missingProperty("clicked", "clicked", reader),
                    domain = domain ?: throw Util.missingProperty("domain", "domain", reader),
                    hidden = hidden ?: throw Util.missingProperty("hidden", "hidden", reader),
                    isSelf = isSelf ?: throw Util.missingProperty("isSelf", "is_self", reader),
                    locked = locked ?: throw Util.missingProperty("locked", "locked", reader),
                    mediaEmbed = secureMedia,
                    numComments = numComments ?: throw Util.missingProperty(
                        "numComments", "num_comments",
                        reader
                    ),
                    preview = preview,
                    over18 = over18 ?: throw Util.missingProperty("over18", "over_18", reader),
                    permalink = permalink ?: throw Util.missingProperty(
                        "permalink",
                        "permalink",
                        reader
                    ),
                    saved = saved ?: throw Util.missingProperty("saved", "saved", reader),
                    score = score ?: throw Util.missingProperty("score", "score", reader),
                    selftext = selftext ?: throw Util.missingProperty(
                        "selftext",
                        "selftext",
                        reader
                    ),
                    subreddit = subreddit ?: throw Util.missingProperty(
                        "subreddit",
                        "subreddit",
                        reader
                    ),
                    subredditId = subredditId ?: throw Util.missingProperty(
                        "subredditId", "subreddit_id",
                        reader
                    ),
                    thumbnail = thumbnail ?: throw Util.missingProperty(
                        "thumbnail",
                        "thumbnail",
                        reader
                    ),
                    title = title ?: throw Util.missingProperty("title", "title", reader),
                    url = url ?: throw Util.missingProperty("url", "url", reader),
                    edited = edited,
                    distinguished = distinguished,
                    stickied = stickied ?: throw Util.missingProperty(
                        "stickied",
                        "stickied",
                        reader
                    ), name = name
                )
            }
            (secureMedia?.oembed != null && secureMedia.oembed?.providerUrl?.contains("https://www.youtube.com") == true) -> {
                Link.LinkYouTube(
                    created = created ?: throw Util.missingProperty("created", "created", reader),
                    createdUTC = createdUTC ?: throw Util.missingProperty(
                        "createdUTC",
                        "created_utc",
                        reader
                    ),
                    ups = ups ?: throw Util.missingProperty("ups", "ups", reader),
                    downs = downs ?: throw Util.missingProperty("downs", "downs", reader),
                    likes = likes,
                    author = author,
                    clicked = clicked ?: throw Util.missingProperty("clicked", "clicked", reader),
                    domain = domain ?: throw Util.missingProperty("domain", "domain", reader),
                    hidden = hidden ?: throw Util.missingProperty("hidden", "hidden", reader),
                    isSelf = isSelf ?: throw Util.missingProperty("isSelf", "is_self", reader),
                    locked = locked ?: throw Util.missingProperty("locked", "locked", reader),
                    media = media,
                    secureMedia = secureMedia,
                    numComments = numComments ?: throw Util.missingProperty(
                        "numComments", "num_comments",
                        reader
                    ),
                    preview = preview,
                    over18 = over18 ?: throw Util.missingProperty("over18", "over_18", reader),
                    permalink = permalink ?: throw Util.missingProperty(
                        "permalink",
                        "permalink",
                        reader
                    ),
                    saved = saved ?: throw Util.missingProperty("saved", "saved", reader),
                    score = score ?: throw Util.missingProperty("score", "score", reader),
                    selftext = selftext ?: throw Util.missingProperty(
                        "selftext",
                        "selftext",
                        reader
                    ),
                    subreddit = subreddit ?: throw Util.missingProperty(
                        "subreddit",
                        "subreddit",
                        reader
                    ),
                    subredditId = subredditId ?: throw Util.missingProperty(
                        "subredditId", "subreddit_id",
                        reader
                    ),
                    thumbnail = thumbnail ?: throw Util.missingProperty(
                        "thumbnail",
                        "thumbnail",
                        reader
                    ),
                    title = title ?: throw Util.missingProperty("title", "title", reader),
                    url = url ?: throw Util.missingProperty("url", "url", reader),
                    edited = edited,
                    distinguished = distinguished,
                    stickied = stickied ?: throw Util.missingProperty(
                        "stickied",
                        "stickied",
                        reader
                    ),
                    name = name

                )
            }
            (url != null && !url.contains("redd")) -> {
                /*   if(secureMedia?.oembed?.url!=null){
                       url=secureMedia.oembed?.url
                       /*||*//*(secureMedia?.oembed?.url!=null && !secureMedia.oembed!!.url!!.contains("redd")*///)
                   }*/
                Link.LinkOut(
                    created = created ?: throw Util.missingProperty("created", "created", reader),
                    createdUTC = createdUTC ?: throw Util.missingProperty(
                        "createdUTC",
                        "created_utc",
                        reader
                    ),
                    ups = ups ?: throw Util.missingProperty("ups", "ups", reader),
                    downs = downs ?: throw Util.missingProperty("downs", "downs", reader),
                    likes = likes,
                    author = author,
                    clicked = clicked ?: throw Util.missingProperty("clicked", "clicked", reader),
                    domain = domain ?: throw Util.missingProperty("domain", "domain", reader),
                    hidden = hidden ?: throw Util.missingProperty("hidden", "hidden", reader),
                    isSelf = isSelf ?: throw Util.missingProperty("isSelf", "is_self", reader),
                    locked = locked ?: throw Util.missingProperty("locked", "locked", reader),
                    mediaEmbed = secureMedia,
                    numComments = numComments ?: throw Util.missingProperty(
                        "numComments", "num_comments",
                        reader
                    ),
                    preview = preview,
                    over18 = over18 ?: throw Util.missingProperty("over18", "over_18", reader),
                    permalink = permalink ?: throw Util.missingProperty(
                        "permalink",
                        "permalink",
                        reader
                    ),
                    saved = saved ?: throw Util.missingProperty("saved", "saved", reader),
                    score = score ?: throw Util.missingProperty("score", "score", reader),
                    selftext = selftext ?: throw Util.missingProperty(
                        "selftext",
                        "selftext",
                        reader
                    ),
                    subreddit = subreddit ?: throw Util.missingProperty(
                        "subreddit",
                        "subreddit",
                        reader
                    ),
                    subredditId = subredditId ?: throw Util.missingProperty(
                        "subredditId", "subreddit_id",
                        reader
                    ),
                    thumbnail = thumbnail ?: throw Util.missingProperty(
                        "thumbnail",
                        "thumbnail",
                        reader
                    ),
                    title = title ?: throw Util.missingProperty("title", "title", reader),
                    url = url ?: throw Util.missingProperty("url", "url", reader),
                    edited = edited,
                    distinguished = distinguished,
                    stickied = stickied ?: throw Util.missingProperty(
                        "stickied",
                        "stickied",
                        reader
                    ),
                    mediaMetadata = mediaMetadata,
                    name = name
                )
            }
            //|| mediaMetadata != null
            preview?.images != null || mediaMetadata != null -> {
                Link.LinkPict(
                    created = created ?: throw Util.missingProperty("created", "created", reader),
                    createdUTC = createdUTC ?: throw Util.missingProperty(
                        "createdUTC",
                        "created_utc",
                        reader
                    ),
                    ups = ups ?: throw Util.missingProperty("ups", "ups", reader),
                    downs = downs ?: throw Util.missingProperty("downs", "downs", reader),
                    likes = likes,
                    author = author,
                    clicked = clicked ?: throw Util.missingProperty("clicked", "clicked", reader),
                    domain = domain ?: throw Util.missingProperty("domain", "domain", reader),
                    hidden = hidden ?: throw Util.missingProperty("hidden", "hidden", reader),
                    isSelf = isSelf ?: throw Util.missingProperty("isSelf", "is_self", reader),
                    locked = locked ?: throw Util.missingProperty("locked", "locked", reader),
                    mediaEmbed = secureMedia,
                    numComments = numComments ?: throw Util.missingProperty(
                        "numComments", "num_comments",
                        reader
                    ),
                    preview = preview,
                    over18 = over18 ?: throw Util.missingProperty("over18", "over_18", reader),
                    permalink = permalink ?: throw Util.missingProperty(
                        "permalink",
                        "permalink",
                        reader
                    ),
                    saved = saved ?: throw Util.missingProperty("saved", "saved", reader),
                    score = score ?: throw Util.missingProperty("score", "score", reader),
                    selftext = selftext ?: throw Util.missingProperty(
                        "selftext",
                        "selftext",
                        reader
                    ),
                    subreddit = subreddit ?: throw Util.missingProperty(
                        "subreddit",
                        "subreddit",
                        reader
                    ),
                    subredditId = subredditId ?: throw Util.missingProperty(
                        "subredditId", "subreddit_id",
                        reader
                    ),
                    thumbnail = thumbnail ?: throw Util.missingProperty(
                        "thumbnail",
                        "thumbnail",
                        reader
                    ),
                    title = title ?: throw Util.missingProperty("title", "title", reader),
                    url = url ?: throw Util.missingProperty("url", "url", reader),
                    edited = edited,
                    distinguished = distinguished,
                    stickied = stickied ?: throw Util.missingProperty(
                        "stickied",
                        "stickied",
                        reader
                    ),
                    mediaMetadata = mediaMetadata,
                    name = name
                )
            }
            else -> {
                Link.LinkText(
                    created = created ?: throw Util.missingProperty("created", "created", reader),
                    createdUTC = createdUTC ?: throw Util.missingProperty(
                        "createdUTC",
                        "created_utc",
                        reader
                    ),
                    ups = ups ?: throw Util.missingProperty("ups", "ups", reader),
                    downs = downs ?: throw Util.missingProperty("downs", "downs", reader),
                    likes = likes,
                    author = author,
                    clicked = clicked ?: throw Util.missingProperty("clicked", "clicked", reader),
                    domain = domain ?: throw Util.missingProperty("domain", "domain", reader),
                    hidden = hidden ?: throw Util.missingProperty("hidden", "hidden", reader),
                    isSelf = isSelf ?: throw Util.missingProperty("isSelf", "is_self", reader),
                    locked = locked ?: throw Util.missingProperty("locked", "locked", reader),
                    mediaEmbed = secureMedia,
                    numComments = numComments ?: throw Util.missingProperty(
                        "numComments", "num_comments",
                        reader
                    ),
                    preview = preview,
                    over18 = over18 ?: throw Util.missingProperty("over18", "over_18", reader),
                    permalink = permalink ?: throw Util.missingProperty(
                        "permalink",
                        "permalink",
                        reader
                    ),
                    saved = saved ?: throw Util.missingProperty("saved", "saved", reader),
                    score = score ?: throw Util.missingProperty("score", "score", reader),
                    selftext = selftext ?: throw Util.missingProperty(
                        "selftext",
                        "selftext",
                        reader
                    ),
                    subreddit = subreddit ?: throw Util.missingProperty(
                        "subreddit",
                        "subreddit",
                        reader
                    ),
                    subredditId = subredditId ?: throw Util.missingProperty(
                        "subredditId", "subreddit_id",
                        reader
                    ),
                    thumbnail = thumbnail ?: throw Util.missingProperty(
                        "thumbnail",
                        "thumbnail",
                        reader
                    ),
                    title = title ?: throw Util.missingProperty("title", "title", reader),
                    url = url ?: throw Util.missingProperty("url", "url", reader),
                    edited = edited,
                    distinguished = distinguished,
                    stickied = stickied ?: throw Util.missingProperty(
                        "stickied",
                        "stickied",
                        reader
                    ),
                    name = name
                )
            }
        }

    }

    public override fun toJson(writer: JsonWriter, value_: Link?): Unit {
        if (value_ == null) {
            throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
        }

        when (value_) {
            is Link.LinkYouTube -> {
                writer.beginObject()
                writer.name("created")
                longAdapter.toJson(writer, value_.created)
                writer.name("created_utc")
                longAdapter.toJson(writer, value_.createdUTC)
                writer.name("ups")
                intAdapter.toJson(writer, value_.ups)
                writer.name("downs")
                intAdapter.toJson(writer, value_.downs)
                writer.name("likes")
                nullableBooleanAdapter.toJson(writer, value_.likes)
                writer.name("author")
                nullableStringAdapter.toJson(writer, value_.author)
                writer.name("clicked")
                booleanAdapter.toJson(writer, value_.clicked)
                writer.name("domain")
                stringAdapter.toJson(writer, value_.domain)
                writer.name("hidden")
                booleanAdapter.toJson(writer, value_.hidden)
                writer.name("is_self")
                booleanAdapter.toJson(writer, value_.isSelf)
                writer.name("locked")
                booleanAdapter.toJson(writer, value_.locked)
                writer.name("media")

                writer.name("num_comments")
                stringAdapter.toJson(writer, value_.numComments)
                writer.name("preview")
                nullableImageUrlAdapter.toJson(writer, value_.preview)
                writer.name("over_18")
                booleanAdapter.toJson(writer, value_.over18)
                writer.name("permalink")
                stringAdapter.toJson(writer, value_.permalink)
                writer.name("saved")
                booleanAdapter.toJson(writer, value_.saved)
                writer.name("score")
                intAdapter.toJson(writer, value_.score)
                writer.name("selftext")
                stringAdapter.toJson(writer, value_.selftext)
                writer.name("subreddit")
                stringAdapter.toJson(writer, value_.subreddit)
                writer.name("subreddit_id")
                stringAdapter.toJson(writer, value_.subredditId)
                writer.name("thumbnail")
                stringAdapter.toJson(writer, value_.thumbnail)
                writer.name("title")
                stringAdapter.toJson(writer, value_.title)
                writer.name("url")
                stringAdapter.toJson(writer, value_.url)
                writer.name("edited")
                nullableAnyAdapter.toJson(writer, value_.edited)
                writer.name("distinguished")
                nullableStringAdapter.toJson(writer, value_.distinguished)
                writer.name("stickied")
                booleanAdapter.toJson(writer, value_.stickied)
                writer.endObject()
            }
            is Link.LinkPict -> {
                writer.beginObject()
                writer.name("created")
                longAdapter.toJson(writer, value_.created)
                writer.name("created_utc")
                longAdapter.toJson(writer, value_.createdUTC)
                writer.name("ups")
                intAdapter.toJson(writer, value_.ups)
                writer.name("downs")
                intAdapter.toJson(writer, value_.downs)
                writer.name("likes")
                nullableBooleanAdapter.toJson(writer, value_.likes)
                writer.name("author")
                nullableStringAdapter.toJson(writer, value_.author)
                writer.name("clicked")
                booleanAdapter.toJson(writer, value_.clicked)
                writer.name("domain")
                stringAdapter.toJson(writer, value_.domain)
                writer.name("hidden")
                booleanAdapter.toJson(writer, value_.hidden)
                writer.name("is_self")
                booleanAdapter.toJson(writer, value_.isSelf)
                writer.name("locked")
                booleanAdapter.toJson(writer, value_.locked)
                writer.name("media")

                writer.name("secure_media")
                nullableMediaAdapter.toJson(writer, value_.mediaEmbed)
                writer.name("num_comments")
                stringAdapter.toJson(writer, value_.numComments)
                writer.name("preview")
                nullableImageUrlAdapter.toJson(writer, value_.preview)
                writer.name("over_18")
                booleanAdapter.toJson(writer, value_.over18)
                writer.name("permalink")
                stringAdapter.toJson(writer, value_.permalink)
                writer.name("saved")
                booleanAdapter.toJson(writer, value_.saved)
                writer.name("score")
                intAdapter.toJson(writer, value_.score)
                writer.name("selftext")
                stringAdapter.toJson(writer, value_.selftext)
                writer.name("subreddit")
                stringAdapter.toJson(writer, value_.subreddit)
                writer.name("subreddit_id")
                stringAdapter.toJson(writer, value_.subredditId)
                writer.name("thumbnail")
                stringAdapter.toJson(writer, value_.thumbnail)
                writer.name("title")
                stringAdapter.toJson(writer, value_.title)
                writer.name("url")
                stringAdapter.toJson(writer, value_.url)
                writer.name("edited")
                nullableAnyAdapter.toJson(writer, value_.edited)
                writer.name("distinguished")
                nullableStringAdapter.toJson(writer, value_.distinguished)
                writer.name("stickied")
                booleanAdapter.toJson(writer, value_.stickied)
                writer.endObject()
            }
            is Link.LinkRedditVideo -> {
                writer.beginObject()
                writer.name("created")
                longAdapter.toJson(writer, value_.created)
                writer.name("created_utc")
                longAdapter.toJson(writer, value_.createdUTC)
                writer.name("ups")
                intAdapter.toJson(writer, value_.ups)
                writer.name("downs")
                intAdapter.toJson(writer, value_.downs)
                writer.name("likes")
                nullableBooleanAdapter.toJson(writer, value_.likes)
                writer.name("author")
                nullableStringAdapter.toJson(writer, value_.author)
                writer.name("clicked")
                booleanAdapter.toJson(writer, value_.clicked)
                writer.name("domain")
                stringAdapter.toJson(writer, value_.domain)
                writer.name("hidden")
                booleanAdapter.toJson(writer, value_.hidden)
                writer.name("is_self")
                booleanAdapter.toJson(writer, value_.isSelf)
                writer.name("locked")
                booleanAdapter.toJson(writer, value_.locked)
                writer.name("media")

                writer.name("secure_media")
                nullableMediaAdapter.toJson(writer, value_.mediaEmbed)
                writer.name("num_comments")
                stringAdapter.toJson(writer, value_.numComments)
                writer.name("preview")
                nullableImageUrlAdapter.toJson(writer, value_.preview)
                writer.name("over_18")
                booleanAdapter.toJson(writer, value_.over18)
                writer.name("permalink")
                stringAdapter.toJson(writer, value_.permalink)
                writer.name("saved")
                booleanAdapter.toJson(writer, value_.saved)
                writer.name("score")
                intAdapter.toJson(writer, value_.score)
                writer.name("selftext")
                stringAdapter.toJson(writer, value_.selftext)
                writer.name("subreddit")
                stringAdapter.toJson(writer, value_.subreddit)
                writer.name("subreddit_id")
                stringAdapter.toJson(writer, value_.subredditId)
                writer.name("thumbnail")
                stringAdapter.toJson(writer, value_.thumbnail)
                writer.name("title")
                stringAdapter.toJson(writer, value_.title)
                writer.name("url")
                stringAdapter.toJson(writer, value_.url)
                writer.name("edited")
                nullableAnyAdapter.toJson(writer, value_.edited)
                writer.name("distinguished")
                nullableStringAdapter.toJson(writer, value_.distinguished)
                writer.name("stickied")
                booleanAdapter.toJson(writer, value_.stickied)
                writer.endObject()
            }
            is Link.LinkText -> {
                writer.beginObject()
                writer.name("created")
                longAdapter.toJson(writer, value_.created)
                writer.name("created_utc")
                longAdapter.toJson(writer, value_.createdUTC)
                writer.name("ups")
                intAdapter.toJson(writer, value_.ups)
                writer.name("downs")
                intAdapter.toJson(writer, value_.downs)
                writer.name("likes")
                nullableBooleanAdapter.toJson(writer, value_.likes)
                writer.name("author")
                nullableStringAdapter.toJson(writer, value_.author)
                writer.name("clicked")
                booleanAdapter.toJson(writer, value_.clicked)
                writer.name("domain")
                stringAdapter.toJson(writer, value_.domain)
                writer.name("hidden")
                booleanAdapter.toJson(writer, value_.hidden)
                writer.name("is_self")
                booleanAdapter.toJson(writer, value_.isSelf)
                writer.name("locked")
                booleanAdapter.toJson(writer, value_.locked)
                writer.name("media")
                writer.name("secure_media")
                nullableMediaAdapter.toJson(writer, value_.mediaEmbed)
                writer.name("num_comments")
                stringAdapter.toJson(writer, value_.numComments)
                writer.name("preview")
                nullableImageUrlAdapter.toJson(writer, value_.preview)
                writer.name("over_18")
                booleanAdapter.toJson(writer, value_.over18)
                writer.name("permalink")
                stringAdapter.toJson(writer, value_.permalink)
                writer.name("saved")
                booleanAdapter.toJson(writer, value_.saved)
                writer.name("score")
                intAdapter.toJson(writer, value_.score)
                writer.name("selftext")
                stringAdapter.toJson(writer, value_.selftext)
                writer.name("subreddit")
                stringAdapter.toJson(writer, value_.subreddit)
                writer.name("subreddit_id")
                stringAdapter.toJson(writer, value_.subredditId)
                writer.name("thumbnail")
                stringAdapter.toJson(writer, value_.thumbnail)
                writer.name("title")
                stringAdapter.toJson(writer, value_.title)
                writer.name("url")
                stringAdapter.toJson(writer, value_.url)
                writer.name("edited")
                nullableAnyAdapter.toJson(writer, value_.edited)
                writer.name("distinguished")
                nullableStringAdapter.toJson(writer, value_.distinguished)
                writer.name("stickied")
                booleanAdapter.toJson(writer, value_.stickied)
                writer.endObject()
            }
            is Link.LinkOut -> {
                writer.beginObject()
                writer.name("created")
                longAdapter.toJson(writer, value_.created)
                writer.name("created_utc")
                longAdapter.toJson(writer, value_.createdUTC)
                writer.name("ups")
                intAdapter.toJson(writer, value_.ups)
                writer.name("downs")
                intAdapter.toJson(writer, value_.downs)
                writer.name("likes")
                nullableBooleanAdapter.toJson(writer, value_.likes)
                writer.name("author")
                nullableStringAdapter.toJson(writer, value_.author)
                writer.name("clicked")
                booleanAdapter.toJson(writer, value_.clicked)
                writer.name("domain")
                stringAdapter.toJson(writer, value_.domain)
                writer.name("hidden")
                booleanAdapter.toJson(writer, value_.hidden)
                writer.name("is_self")
                booleanAdapter.toJson(writer, value_.isSelf)
                writer.name("locked")
                booleanAdapter.toJson(writer, value_.locked)
                writer.name("media")

                writer.name("secure_media")
                nullableMediaAdapter.toJson(writer, value_.mediaEmbed)
                writer.name("num_comments")
                stringAdapter.toJson(writer, value_.numComments)
                writer.name("preview")
                nullableImageUrlAdapter.toJson(writer, value_.preview)
                writer.name("over_18")
                booleanAdapter.toJson(writer, value_.over18)
                writer.name("permalink")
                stringAdapter.toJson(writer, value_.permalink)
                writer.name("saved")
                booleanAdapter.toJson(writer, value_.saved)
                writer.name("score")
                intAdapter.toJson(writer, value_.score)
                writer.name("selftext")
                stringAdapter.toJson(writer, value_.selftext)
                writer.name("subreddit")
                stringAdapter.toJson(writer, value_.subreddit)
                writer.name("subreddit_id")
                stringAdapter.toJson(writer, value_.subredditId)
                writer.name("thumbnail")
                stringAdapter.toJson(writer, value_.thumbnail)
                writer.name("title")
                stringAdapter.toJson(writer, value_.title)
                writer.name("url")
                stringAdapter.toJson(writer, value_.url)
                writer.name("edited")
                nullableAnyAdapter.toJson(writer, value_.edited)
                writer.name("distinguished")
                nullableStringAdapter.toJson(writer, value_.distinguished)
                writer.name("stickied")
                booleanAdapter.toJson(writer, value_.stickied)
                writer.endObject()
            }

            else -> {}
        }
    }
}
